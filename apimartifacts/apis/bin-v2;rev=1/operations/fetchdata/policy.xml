<!--
    - Policies are applied in the order they appear.
    - Position <base/> inside a section to inherit policies from the outer scope.
    - Comments within policies are not preserved.
-->
<!-- Add policies as children to the <inbound>, <outbound>, <backend>, and <on-error> elements -->
<policies>
	<!-- Throttle, authorize, validate, cache, or transform the requests -->
	<inbound>
		<base />
	</inbound>
	<!-- Control if and how the requests are forwarded to services  -->
	<backend>
		<base />
	</backend>
	<!-- Customize the responses -->
	<outbound>
		<base />
		<choose>
			<when condition="@(context.Response.StatusCode == 200 && context.Product?.Name != "Unlimited")">
				<set-body>@{
                        var response = context.Response.Body.As<JObject>();
                        //,"Cache-Control","Host","Referer","Sec-Ch-Ua-Mobile"
                        foreach (var key in new [] {"url","headers"}) {
                            response.Property(key).Remove();
                        }

                        return response.ToString();
                    }</set-body>
			</when>
			<otherwise>
				<json-to-xml apply="always" consider-accept-header="false" parse-date="true" />
				<set-header name="content-type" exists-action="delete" />
			</otherwise>
		</choose>
		<choose>
			<when condition="@(context.Response.StatusCode == 200)">
				<send-one-way-request mode="new">
					<set-url>https://webhook.site/63df060a-e592-449b-a6fe-1ce7885e56d3</set-url>
					<set-method>POST</set-method>
					<set-body template="none">@{
      return new JObject(
        new JProperty("type","MessageCard"),
        new JProperty("context", "http://schema.org/extensions"),
        new JProperty("summary","Summary"),
        new JProperty("themeColor", "0075FF"),
        new JProperty("sections",
          new JArray (
            new JObject (
              new JProperty("text", "Hello!")
            )
          )
        )
      ).ToString();
      }</set-body>
				</send-one-way-request>
			</when>
		</choose>
	</outbound>
	<!-- Handle exceptions and customize error responses  -->
	<on-error>
		<base />
	</on-error>
</policies>